/* !!EnoFJS!! Version: 3.2.0, Author: EnoF <andy@provictores.com> (http://enof.github.io/EnoFJS, Fork me on Github: https://github.com/EnoF/EnoFJS */!function(a,b){"use strict";var c=a(function(){this.private={key:{getSet:null},value:{getSet:null},previous:{getSet:null},next:{getSet:null}},this.constructor=function(a,b){this.private.key=a,this.private.value=b}}),LinkedHashMap=a(function(){this.private={duplicateKeyError:"key already exists in LinkedHashMap",keyNotFoundError:"key not found",size:{get:0},first:{get:null},last:{get:null},hashMap:{},add:function(a,b){if(this.private.hashMap.hasOwnProperty(a))throw new Error(this.private.duplicateKeyError);var d=new c(a,b);return this.private.hashMap[a]=d,this.private.size++,d},remove:function(a){var b=a.getKey();a===this.private.first?(this.private.first=this.private.first.getNext(),this.private.first instanceof c&&this.private.first.setPrevious(null)):a===this.private.last?(this.private.last=this.private.last.getPrevious(),this.private.last.setNext(null)):(a.getPrevious().setNext(a.getNext()),a.getNext().setPrevious(a.getPrevious())),this.private.size--,delete this.private.hashMap[b]}},this.protected={addAfter:function(a,b){var c=a.getNext();null!==c?(c.setPrevious(b),b.setNext(c)):this.private.last=b,a.setNext(b),b.setPrevious(a)},addBefore:function(a,b){var c=a.getPrevious();null!==c?(c.setNext(b),b.setPrevious(c)):this.private.first=b,a.setPrevious(b),b.setNext(a)}},this.public={add:function(a,b){var c=this.private.add(a,b);return 1===this.private.size?this.private.first=c:this.protected.addAfter(this.private.last,c),this.private.last=c,c},addAfter:function(a,b,c){var d=this.private.add(b,c),e=this.public.getById(a);return this.protected.addAfter(e,d),d},addBefore:function(a,b,c){var d=this.private.add(b,c),e=this.public.getById(a);return this.protected.addBefore(e,d),d},addFirst:function(a,b){var c=this.private.add(a,b),d=this.private.first;return null!==d&&this.protected.addBefore(d,c),c},addLast:function(a,b){return this.public.add(a,b)},getById:function(a){var c=this.private.hashMap[a];if(c===b)throw new Error(this.private.keyNotFoundError);return c},isEmpty:function(){return 0===this.private.size},remove:function(a){return this.private.hashMap.hasOwnProperty(a)?this.private.remove(this.public.getById(a)):!1},removeFirst:function(){return null===this.private.first?!1:this.private.remove(this.private.first)},removeLast:function(){return null===this.private.last?!1:this.private.remove(this.private.last)}},this.constructor=function(){this.private.hashMap={}}});window.LinkedHashMap=LinkedHashMap}(window.clazz);